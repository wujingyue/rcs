diff --git a/lib/Andersens/Andersens.cpp b/lib/Andersens/Andersens.cpp
index c89dc49..f0b5232 100644
--- a/lib/Andersens/Andersens.cpp
+++ b/lib/Andersens/Andersens.cpp
@@ -800,6 +801,9 @@ void Andersens::IdentifyObjects(Module &M) {
     // The function itself is a memory object.
+    // Added by Jingyue
+    // ValueNodes[F] must be adjacent with ReturnNodes[F].
+    ObjectNodes[F] = NumObjects++;
     unsigned First = NumObjects;
     ValueNodes[F] = NumObjects++;
     if (isa<PointerType>(F->getFunctionType()->getReturnType()))
       ReturnNodes[F] = NumObjects++;
     if (F->getFunctionType()->isVarArg())
@@ -1112,6 +1117,15 @@ void Andersens::CollectConstraints(Module &M) {
     }
   }
 
+  // Added by Jingyue
+  for (Module::iterator F = M.begin(); F != M.end(); ++F) {
+    unsigned ObjectIndex = getObject(F);
+    Node *Object = &GraphNodes[ObjectIndex];
+    Object->setValue(F);
+    Constraints.push_back(Constraint(Constraint::AddressOf, getNodeValue(*F),
+                                     ObjectIndex));
+  }
+
   for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
     // Set up the return value node.
     if (isa<PointerType>(F->getFunctionType()->getReturnType()))
